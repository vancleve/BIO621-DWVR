---
title: 'Vectors, slicing, and map(ping)'
author: "Jeremy Van Cleve"
date: 12 09 2022
format: 
  html:
    self-contained: true
---

# Outline for today

- Matrices and arrays
- Indexing and slicing
- Mapping and applying

# Matrices and arrays

Previously, you have seen vectors, which are just lists of objects of a single type. However, you often want a matrix of objects of a single (or multiple!) types or even a higher dimensions group of objects. The two dimensional version of a vector is called a **`matrix`** and the *n*-dimensional version is called an **`array`**.

You can think of a matrix as a vector,
```{r}
vec = 1:16
vec
```
except you've specified that there are a certain number of rows and columns:
```{r}
matx = matrix(vec, nrow = 4, ncol = 4)
matx
```
Notice how the vector "filled" each column of the matrix. This is because R is a "column-major" language (Fortran, MATLAB, and Julia are other column-major langauges). Some languages, such as C and Python, and have row-major order.

Since you often deal with matrices and matrix-like objects, R has two functions to give you the number of rows and columns. Also, the length of the matrix is just the rows times the columns.
```{r}
nrow(matx)
ncol(matx)
length(matx)
```

Likewise, you can convert the vector to a 4x4 array:
```{r}
arr = array(vec, dim = c(4,4))
arr
```
Two-dimensional arrays are exactly the same as matrices:
```{r}
str(matx)
str(arr)
```

In the above, the `dim` argument specifies the dimensionality of the array. Thus, you can convert the vector to a multidimensional array of 2x2x2x2 as well:
```{r}
arr = array(vec, dim = c(2,2,2,2))
arr
```
Note that this is a four-dimensional object, so you can't print it without having to "flatten" it in some way.

# Indexing and slicing

Indexing matrices works similarly to indexing vectors except that you give a list of the elements you want from each dimension. First, suppose that you roll a twenty-sided die 100 times (because you are a super nerd) and you collect the results in a 10x10 matrix:
```{r}
set.seed(100) # this gives us the same "random" matrix each time
rmatx = matrix(sample(1:20, 100, replace = TRUE), nrow = 10, ncol = 10)
rmatx
```
To obtain the element in the second row, eighth column,
```{r}
rmatx[2,8]
```
You can also get a *"slice"* of the matrix by using the colon operator:
```{r}
rmatx[2,1:5]
```
yields the first five elements of the second row. Note that within the entry for the column element, you actually used a **vector for the index**. Thus, you can give any list of indices in any order you choose. For example,
```{r}
rmatx[c(1,3,5,7,9),c(2,4,6,8,10)]
```
returns a slice of the matrix with only the odd rows and even columns. You can keep all the elements in a specific dimension by just leaving that spot blank. For example, to get the fourth row,
```{r}
rmatx[4,]
```

In general, slicing an array involves giving a list of indices for each dimension of the array.  
**The magic of data wrangling and analysis with complex data comes in the many creative ways one can create these lists of indices and thus the slices that contain exactly the subset of the data that you want.**

## Slicing lists

Recall that lists are like vectors but with potentially multiple types of objects. Thus, they are a little bit more complicated to slice. Take the following list,
```{r}
x = list(1:3, 4:6, 7:9)
x
```
which is a list of three vectors each three elements long. To get the first element of the list, you would do normally do
```{r}
str(x[c(1,2)])
```
but (using the `str` function) you can see that actually returned the first vector as a list of length one. Thus, the single brackets simply return another list that contains the elements requested. You can give the single brackets a vector of indices, so its natural that you should get a list back. To get the component of the list itself, you must use double brackets:
```{r}
str(x[[1]])
```
This will be useful too when we're dealing with `data.frame`s, which are basically just special lists. Another useful thing with lists (and other objects as we'll see next week) is that you can name the elements with strings (that satisfy R objects naming rules!). This allows you to access elements of the list using the name instead of the index. For example, if
```{r}
x = list(a = 1:3, b = 4:6, c = 7:9)
x
```
then we can access the first element using its name "a" and the "$" operator:
```{r}
x$a
```
which is equivalent to
```{r}
x[[1]]
x[["a"]]
x$"a"
x$`a`
```
Any valid R name doesn't need quotes for using the `$`, but you need them for fancy non-R friendly names:
```{r}
x = list(`1 fancy name`=1:3,  b = 4:6, c = 7:9)
x$`1 fancy name`
x[["1 fancy name"]]
```

## Other ways to slice

- Negative integers omit the specified positions:
  ```{r}
  rmatx
  rmatx[-c(1,3,5,7,9),c(2,4,6,8,10)]
  ```
  gives the even rows and even columns.
    
- Logical vectors selects elements of the matrix where the index vector is TRUE.  
  **This is one of the most useful ways to index.**  
  If you want to get only the rolls of the die that were less than 10, then you create a matrix of logicals
  ```{r}
  rmatx < 10
  ```
  and use it to index the matrix:
  ```{r}
  rmatx[rmatx < 10]
  ```
  Notice here that you get a vector back, not a matrix. This is because when you give a single index to a matrix, it treats the matrix like a vector with the first column first, then the second column, etc (i.e., column-major order). It also makes sense that you don't get a matrix back since the "< 10" condition could be met anywhere any number of times in the matrix (i.e., no guarantee that the result would be square like a matrix).
    
  You could also just slice rows based on columns (or vice versa). This is the kind of slicing we'll often do on a data table since we will want all rows (say, results from different experiments) whose column (say, factor in the experiment) matches a certain condition. For example, suppose we want to get all rows of the matrix `rmatx` with a fourth column whose roll is less than 10. We first slice the fourth column with `rmatx[,4]` and then compare it to 10,
  ```{r}
  rmatx
  rmatx[,4] < 10
  ```
  Note that we get a vector of boolean values indicating whether the element in that row of the fourth column is less than 10. To get only those rows of the matrix `rmatx`, we then use this vector to slice the matrix:
  ```{r}
  rmatx[rmatx[,4] < 10,]
  ```

# Mapping and applying

Given that you can slice matrices now, you will at some point want to apply some function to each element of that slice or to each row or column of the matrix. This can be done with a `for` loop, but there are functions that simply this. Such functions are `apply` functions in R and `map` functions in Python and Mathematica.

In R, there are actually many `apply` functions since there are different types of list objects. To see them all, you type
```{r}
??base::apply
```
which searches for all functions with "apply" in the description in the "base" package. 

If you have a list, the easiest apply function is `sapply`, which applies a function to each element of a vector or list and returns the output as a vector or matrix if possible. For example, you could sum each vector in the list you created above using the `sum` function.
```{r}
x
sapply(x, sum)
```
Note that `sapply` gave you back a vector but with each element named according to the names of the list elements (handy!). 

If you want to use apply over a matrix, the `apply` function is required. To add all the elements in each row (dimension 1) or column (dimension 2) of the matrix `matx`, you can try
```{r}
matx
apply(matx, 1, sum)
apply(matx, 2, sum)
```
However, you can do more complicated things by making custom functions and "applying" them. For example, in order to get the number of die rolls less than 10 in each column of your die roll matrix, you could try
```{r}
rmatx
apply(rmatx, 1, function(x) sum(x < 10))
```
where you have a small "anonymous" (unnamed) function here that gets a logical vector for each row, TRUE for > 10 and FALSE for <= 10, and sums that vector (TRUE = 1 and FALSE = 0).

# Lab ![](assets/beaker.png)

Now let's slice some real **DATA**. We'll return to the COVID-19 data from the New York Times (<https://github.com/nytimes/covid-19-data>). Below we load the data and transform it from cumulative counts to daily counts of cases. Finally, we select case data for 2021 only.
```{r, message=FALSE}
library(tidyverse)

us = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")

us_cases_2021_wide = us %>%
  # make each state its own column
  pivot_wider(c(date), names_from = state, values_from = cases) %>% 
  # for each column subtract, subtract the previous day's case #
  mutate(across(where(is.numeric), ~ .x - lag(.x))) %>%
  # filter out only 2021 cases
  filter(date >= "2021-01-01" & date <= "2021-12-31")
  
us_cases_2021 = us_cases_2021_wide %>% 
  # put baack into tidy format
  pivot_longer(-date, names_to = "state", values_to = "cases") %>%
  # filter out rows with NA case
  filter(!is.na(cases))
```
You can get the first few rows with
```{r}
head(us_cases_2021)
```
and compare it to the "wide" version
```{r}
head(us_cases_2021_wide)
```


The data are saved as a `tibble`, which is really a fancy `data.frame`, which is a special kind of list that we will discuss in more detail next week. For the moment, you can practice slicing the data.frame as if it were a matrix. 

### Problems

Load the `.csv` file using the code above and show the R code in your `.Rmd` file for each of the following problems. You should be able to use a few lines of R code to obtain the answer directly (i.e., you shouldn't just scroll though the data table and give the answer by hand). Use the `us_cases_2021` and `us_cases_2021_wide `data frames; the "long" format data frame `us_cases_2021` may be easier to use in some problems whereas the `us_cases_2021_wide" may be easier to use in others.

1. Which states have had more than 75,000 cases during one day in 2021?

2. How many cases has Kentucky had during 2021? (hint: use the `sum` function)

3. How many cases where there outside of California in the month of August? (hint: you'll need the boolean `&` to combine multiple conditions)

4. Which US state has the second fewest number of cases in 2021? (hint: use `sapply` with `sum` and then use the `sort` function)

5. Which day in 2021 had the highest number of cases in the country (all states and territories)?
   (hint: use `apply` and `sum` to get the totals for each date. Then use the `order` function to give you the right order to sort the dates...)
   